// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package maxapipb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetMaxApiClient is the client API for GetMaxApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetMaxApiClient interface {
	MaxApi(ctx context.Context, opts ...grpc.CallOption) (GetMaxApi_MaxApiClient, error)
}

type getMaxApiClient struct {
	cc grpc.ClientConnInterface
}

func NewGetMaxApiClient(cc grpc.ClientConnInterface) GetMaxApiClient {
	return &getMaxApiClient{cc}
}

func (c *getMaxApiClient) MaxApi(ctx context.Context, opts ...grpc.CallOption) (GetMaxApi_MaxApiClient, error) {
	stream, err := c.cc.NewStream(ctx, &GetMaxApi_ServiceDesc.Streams[0], "/maxapipb.GetMaxApi/MaxApi", opts...)
	if err != nil {
		return nil, err
	}
	x := &getMaxApiMaxApiClient{stream}
	return x, nil
}

type GetMaxApi_MaxApiClient interface {
	Send(*MaxApiRequest) error
	Recv() (*MaxApiResponse, error)
	grpc.ClientStream
}

type getMaxApiMaxApiClient struct {
	grpc.ClientStream
}

func (x *getMaxApiMaxApiClient) Send(m *MaxApiRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *getMaxApiMaxApiClient) Recv() (*MaxApiResponse, error) {
	m := new(MaxApiResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GetMaxApiServer is the server API for GetMaxApi service.
// All implementations must embed UnimplementedGetMaxApiServer
// for forward compatibility
type GetMaxApiServer interface {
	MaxApi(GetMaxApi_MaxApiServer) error
	mustEmbedUnimplementedGetMaxApiServer()
}

// UnimplementedGetMaxApiServer must be embedded to have forward compatible implementations.
type UnimplementedGetMaxApiServer struct {
}

func (UnimplementedGetMaxApiServer) MaxApi(GetMaxApi_MaxApiServer) error {
	return status.Errorf(codes.Unimplemented, "method MaxApi not implemented")
}
func (UnimplementedGetMaxApiServer) mustEmbedUnimplementedGetMaxApiServer() {}

// UnsafeGetMaxApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetMaxApiServer will
// result in compilation errors.
type UnsafeGetMaxApiServer interface {
	mustEmbedUnimplementedGetMaxApiServer()
}

func RegisterGetMaxApiServer(s grpc.ServiceRegistrar, srv GetMaxApiServer) {
	s.RegisterService(&GetMaxApi_ServiceDesc, srv)
}

func _GetMaxApi_MaxApi_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GetMaxApiServer).MaxApi(&getMaxApiMaxApiServer{stream})
}

type GetMaxApi_MaxApiServer interface {
	Send(*MaxApiResponse) error
	Recv() (*MaxApiRequest, error)
	grpc.ServerStream
}

type getMaxApiMaxApiServer struct {
	grpc.ServerStream
}

func (x *getMaxApiMaxApiServer) Send(m *MaxApiResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *getMaxApiMaxApiServer) Recv() (*MaxApiRequest, error) {
	m := new(MaxApiRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GetMaxApi_ServiceDesc is the grpc.ServiceDesc for GetMaxApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetMaxApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "maxapipb.GetMaxApi",
	HandlerType: (*GetMaxApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MaxApi",
			Handler:       _GetMaxApi_MaxApi_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "maxapi/maxapipb/maxapi.proto",
}
